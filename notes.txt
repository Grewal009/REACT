Hooks:

function starting with "use" and can only be called at the top level of component. we can´t call hook inside conditions, loops or other nested functions. 

1. useState

const [index, setIndex] = useState(0);

index is local state variable. 
setIndex is setter function. The setter function update the state variable and trigger React to render the component agian. 
0 is initial value.
[] is array destructuring and let us to read values from an array.
The array returned by useState always has exactly two items.

State is private to the component. If you render it in two places, each copy gets its own state.


        IMPORTANT
 *****--------------*****
A state variable is only necessary to keep information between re-renders of a component. Within a single event handler, a regular variable will do fine. Don’t introduce state variables when a regular variable works well.



Examples of expressions that can be converted to false are:
false;
null;
NaN;
0;
empty string ("" or '' or ``);
undefined.


        Adding Event Handlers
*****---------------------------*****
You defined the function i.e handleClick and then passed it as a prop to html tag eg: <button>
handleClick is an event handler. They are:
-> usually defined inside your components.
-> Have names that start with handle, followed by the name of the event.

eg: onClick={handleClick}, onMouseEnter={handleMouseEnter}

Alternatively, we can define an event handler inline in the JSX:
<button onClick={function handleClick(){
        alert('You clicked me!');
}}>

or, using an arrow function:
<button onClick={
        ()=>{
                alert('You clicked me');
        }
}>

All these styles are equivalent. Generally, inline event handler are convenient for short functions.

Important points to remember:
1. Functions passed to event handler must be passed, not called.
eg: <button onClick={handleClick}>    (correct)
    <button onClick={handleClick()}>  (incorrect)

In the first example, the handleClick function is passed as an onClick event handler. This tells React to remember it and only call your function when thw user clicks the button.

In the secomd example, the () at the end of handleClick() fires the function immediately during rendering, without any clicks. This is because Javascript inside the JSX in {} execute right away.


